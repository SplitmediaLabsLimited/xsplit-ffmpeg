# workflows/build-and-publish-ffmpeg.yml
#
# Build & Publish FFmpeg

name: "Build & Publish FFmpeg"

on:
  workflow_dispatch:

jobs:
  # Build and publish FFmpeg
  build-and-publish-ffmpeg:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      matrix:
        config:
          - name: "Windows"
            os: windows-2019 # Same OS as Windows 10
#          - name: "macOS (x64)"
#            os: macos-11 # Xcode and Homebrew come preinstalled
#          - name: "macOS (arm64)"
#            os: macos-11 # Xcode and Homebrew come preinstalled
#          - name: "Ubuntu Linux"
#            os: ubuntu-20.04

    env:
      windows-tar-name: windows-ffmpeg-shared-lib.tar.gz
      windows-build-folder: Windows
#      macos-x64-tar-name: macos-x64-ffmpeg-shared-lib.tar.gz
#      macos-arm64-tar-name: macos-arm64-ffmpeg-shared-lib.tar.gz
#      macos-build-folder: Darwin
#      linux-tar-name: linux-ffmpeg-shared-lib.tar.gz
#      linux-build-folder: Linux
#      headers-tar-name: ffmpeg-headers.tar.gz
#      headers-build-folder: include

    steps:
      ################################# CONFIG STEPS START ##############################

      - name: On macOS and Ubuntu Linux, Checkout this Git Repository Directly
        if: runner.os == 'macOS' || runner.os == 'Linux'
        uses: actions/checkout@v3

      # media-autobuild_suite needs to be directly in the C:\ drive, as it is very finicky with paths
      - name: On Windows, Git Clone FFmpeg and media-autobuild_suite (FFmpeg Windows Compilation Helper Tools) to C:\
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          REM first, clone m-ab-s/media-autobuild_suite to C:\media-autobuild_suite
          REM note that this will use upstream FFmpeg, which is not the same as the FFmpeg (this is only for Windows, we need to
          REM move macOS and Linux to also use upstream FFmpeg eventually, for consistency)
          git clone https://github.com/m-ab-s/media-autobuild_suite C:\media-autobuild_suite

          REM then, clone FFmpeg to C:\media-autobuild_suite\build\ffmpeg
          git clone "https://github.com/FFmpeg/FFmpeg.git" C:\media-autobuild_suite\build\ffmpeg

          REM clone xsplit-ffmpeg repo, we need xsplit-ffmpeg/.github/workflows/helpers
          git clone "https://github.com/SplitmediaLabsLimited/xsplit-ffmpeg.git" C:\media-autobuild_suite\build\xsplit-ffmpeg

      ###################################################################################
      ################################ WINDOWS STEPS START ##############################

      - name: On Windows, Move Preconfigured media-autobuild_suite Config Files Over to C:\media-autobuild_suite/build
        if: runner.os == 'Windows'
        working-directory: C:\media-autobuild_suite
        shell: bash --noprofile --norc -eo pipefail {0}
        run: |
          cp \
          build/xsplit-ffmpeg/.github/workflows/helpers/media-autobuild_suite.ini \
          build/xsplit-ffmpeg/.github/workflows/helpers/ffmpeg_options.txt \
          build/xsplit-ffmpeg/.github/workflows/helpers/mpv_options.txt \
          build/xsplit-ffmpeg/.github/workflows/helpers/bash.sh \
          build/xsplit-ffmpeg/.github/workflows/helpers/mingw.sh \
          build/xsplit-ffmpeg/.github/workflows/helpers/pacman.sh \
          build/

      - name: On Windows, build FFmpeg via media-autobuild_suite from C:\ drive
        if: runner.os == 'Windows'
        working-directory: C:\media-autobuild_suite
        shell: powershell
        run: |  
          # media-autobuild_suite can compile successfully but still exit with exit code 1, causing
          # an incorrect failure of this step. To remediate to this, we manually check that the libs
          # were successfully generated to make sure that the script ran properly, and force an exit
          # code of 0 if they were.
          .\media-autobuild_suite.bat
          
          Echo "Verifying that all the FFmpeg libs were properly built..."
          If (
              (Test-Path -Path C:\media-autobuild_suite\local64\bin-video\avcodec-59.dll -PathType Leaf) -And
              (Test-Path -Path C:\media-autobuild_suite\local64\bin-video\avdevice-59.dll -PathType Leaf) -And
              (Test-Path -Path C:\media-autobuild_suite\local64\bin-video\avfilter-8.dll -PathType Leaf) -And
              (Test-Path -Path C:\media-autobuild_suite\local64\bin-video\avformat-59.dll -PathType Leaf) -And
              (Test-Path -Path C:\media-autobuild_suite\local64\bin-video\avutil-57.dll -PathType Leaf) -And
              (Test-Path -Path C:\media-autobuild_suite\local64\bin-video\swresample-4.dll -PathType Leaf) -And
              (Test-Path -Path C:\media-autobuild_suite\local64\bin-video\swscale-6.dll -PathType Leaf) -And
              (Test-Path -Path C:\media-autobuild_suite\local64\bin-video\avcodec.lib -PathType Leaf) -And
              (Test-Path -Path C:\media-autobuild_suite\local64\bin-video\avdevice.lib -PathType Leaf) -And
              (Test-Path -Path C:\media-autobuild_suite\local64\bin-video\avfilter.lib -PathType Leaf) -And
              (Test-Path -Path C:\media-autobuild_suite\local64\bin-video\avformat.lib -PathType Leaf) -And
              (Test-Path -Path C:\media-autobuild_suite\local64\bin-video\avutil.lib -PathType Leaf) -And
              (Test-Path -Path C:\media-autobuild_suite\local64\bin-video\swresample.lib -PathType Leaf) -And
              (Test-Path -Path C:\media-autobuild_suite\local64\bin-video\swscale.lib -PathType Leaf)
          )
          {
            Echo "All FFmpeg libs successfully built!"
            exit 0
          }

      ###################################################################################
      ################################# MACOS STEPS START ###############################

#      - name: Install macOS Codesigning Certificates on macOS GHA Machine
#        if: runner.os == 'macOS'
#        uses: apple-actions/import-codesign-certs@v1
#        with:
#          p12-file-base64: ${{ secrets.MACOS_SIGNING_P12_CERTIFICATES_BASE64_ENCODED }}
#          p12-password: ${{ secrets.MACOS_SIGNING_P12_CERTIFICATES_BASE64_ENCODED_PASSWORD }}

      # On Intel silicon, Homebrew installs libs to /usr/local/*
#      - name: On macOS, Explicitly Set Proper Homebrew Folder Permissions for Linking FFmpeg Dependencies
#        if: runner.os == 'macOS'
#        run: |
#          sudo chown -R `whoami`:admin /usr/local/bin
#          sudo chown -R `whoami`:admin /usr/local/share
#          sudo chown -R `whoami`:admin /usr/local/opt

#      - name: On macOS, Install FFmpeg macOS Dependencies & macdylibbundler for packaging
#        if: runner.os == 'macOS'
#        run: |
#          # Install dependencies needed for both x64 and arm64 builds
#          brew install automake git libtool shtool wget nasm dylibbundler
#
#          # Install opus for x64 and arm64
#          if [[ "${{ matrix.config.name }}" == "macOS (x64)" ]]; then
#            brew install opus
#          elif [[ "${{ matrix.config.name }}" == "macOS (arm64)" ]]; then
#            echo "Starting cross-compiling libopus for arm64 on macOS..."
#
#            # Download libopus
#            VERSION="1.3.1"
#            echo "Downloading opus-${VERSION}.tar.gz"
#            curl -L "http://downloads.xiph.org/releases/opus/opus-${VERSION}.tar.gz" | tar xz
#            cd "opus-${VERSION}"
#
#            # Configure, build, and install libopus
#            FLAGS="-arch arm64 -O2 -mmacosx-version-min=11.0 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk"
#
#            ./configure \
#              --disable-dependency-tracking \
#              --disable-doc \
#              --host=arm-apple-darwin \
#              CFLAGS="${FLAGS}" \
#              LDFLAGS="${FLAGS}" \
#              CPPFLAGS="${FLAGS}" \
#            && make -j install
#
#            echo "Successfully cross-compiled libopus for arm64 on macOS..."
#          fi

      # We disable command-line programs and SDL2 since we have our own SDL2 static build
#      - name: On macOS, Configure and Make FFmpeg
#        if: runner.os == 'macOS'
#        run: |
#          if [[ "${{ matrix.config.name }}" == "macOS (x64)" ]]; then
#            ./configure \
#            --cc=/usr/bin/clang \
#            --prefix=@loader_path \
#            --libdir=@loader_path \
#            --extra-cflags="-O2 -mmacosx-version-min=10.13 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk" \
#            --extra-cxxflags="-O2 -mmacosx-version-min=10.13 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk" \
#            --extra-ldflags="-mmacosx-version-min=10.13 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk" \
#            --enable-libopus \
#            --enable-pthreads \
#            --enable-shared \
#            --disable-programs \
#            --disable-doc \
#            --disable-debug \
#            --disable-sdl2 \
#            --disable-static \
#            && make -j
#          elif [[ "${{ matrix.config.name }}" == "macOS (arm64)" ]]; then
#            ./configure \
#            --cc=/usr/bin/clang \
#            --enable-cross-compile \
#            --target-os=darwin \
#            --arch=arm64 \
#            --pkg-config=pkg-config \
#            --prefix=@loader_path \
#            --libdir=@loader_path \
#            --extra-cflags="-target arm64-apple-macos11 -O2 -mmacosx-version-min=11.0 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk" \
#            --extra-cxxflags="-target arm64-apple-macos11 -O2 -mmacosx-version-min=11.0 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk" \
#            --extra-ldflags="-target arm64-apple-macos11 -mmacosx-version-min=11.0 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk" \
#            --enable-libopus \
#            --enable-pthreads \
#            --enable-shared \
#            --disable-programs \
#            --disable-doc \
#            --disable-debug \
#            --disable-sdl2 \
#            --disable-static \
#            && make -j
#          else
#            echo "Unsupported compilation attempt on macOS"
#            exit
#          fi

      ###################################################################################
      ############################# Ubuntu Linux STEPS START ############################

#      - name: On Linux, Build FFmpeg through Docker
#        if: runner.os == 'Linux'
#        run: ./docker-build.sh 20

